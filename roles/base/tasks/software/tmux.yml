---
- name: Software | tmux block
  when:
    - tmux is defined
    - tmux

  become: true
  become_method: ansible.builtin.sudo

  block:

    - name: Software | tmux | install tmux package and ruby for gem
      ansible.builtin.apt:
        state: present
        pkg:
          - tmux
          - ruby
          - ruby-rubygems
          - ruby-dev

    - name: Software | tmuxinator | run gem install tmuxinator
      community.general.gem:
        name: tmuxinator
        state: latest

    - name: Software | recursivebly remove .tmux/plugins directory to enable re-runs for {{ user_name }}
      ansible.builtin.file:
        path: /home/{{ user_name }}/.tmux/plugins
        state: absent

    - name: Software | tmux | create .config/tmux directories
      ansible.builtin.file:
        path: /home/{{ user_name }}/.config/{{ item.dir }}
        state: directory
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        mode: "0775"
      with_items:
        - { dir: 'tmux' }
        - { dir: 'tmux/plugins' }

    - name: Software | tmux | git checkout only tpm and sensible git tmux plugins - rest are defined in tmux.conf
      ansible.builtin.git:
        repo: https://github.com/tmux-plugins/{{ item.repo }}
        dest: /home/{{ user_name }}/.config/tmux/plugins/{{ item.plug }}
        force: true
        version: master
      with_items:
        - { repo: 'tpm.git', plug: 'tmp' }
        - { repo: 'tmux-sensible.git', plug: 'tmux-sensible' }

    - name: Software | tmux | recursively chown all tmux plugins files
      ansible.builtin.file:
        path: /home/{{ user_name }}/.config/tmux/plugins
        state: directory
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        mode: "0755"
        recurse: true

    - name: Software | tmux | Download latest release gitmux info
      ansible.legacy.shell: |
        set -o pipefail
        curl --silent "https://api.github.com/repos/arl/gitmux/releases/latest" |
        jq -r .tag_name
      args:
        executable: /bin/bash
      register: gitmux_release
      changed_when: gitmux_release.rc == 0

    - name: Software | tmux | print gitmux_release
      ansible.builtin.debug:
        var: gitmux_release.stdout
        verbosity: 2

    - name: Software | tmux | install binary gitmux
      become: true
      become_method: ansible.builtin.sudo
      ansible.builtin.unarchive:
        src: https://github.com/arl/gitmux/releases/download/{{ gitmux_release.stdout }}/gitmux_{{ gitmux_release.stdout }}_linux_amd64.tar.gz
        dest: /usr/local/bin
        remote_src: true
        mode: "0755"
        owner: root
        group: root

    - name: Software | tmux | create gitmux configuration file
      ansible.builtin.command: gitmux -printcfg
      register: gitmux_config
      changed_when: gitmux_config.rc == 0

    - name: Software | tmux | write gitmux.conf file
      ansible.builtin.copy:
        content: "{{ gitmux_config.stdout }}"
        dest: /home/{{ user_name }}/.config/tmux/gitmux.conf
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        mode: "0644"
