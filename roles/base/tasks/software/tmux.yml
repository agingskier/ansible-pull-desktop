---
- name: Software | tmux | install tmux package
  apt:
    state: present
    pkg:
      - tmux

- name: Software | recursivebly remove .tmux/plugins directory to enable re-runs for {{ user_name }}
  file:
    path: /home/{{ user_name }}/.tmux/plugins
    state: absent

- name: Software | tmux | create .config/tmux directories
  file:
    path: /home/{{ user_name }}/.config/{{ item.dir }}
    state: directory
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
    mode: 0700
  with_items:
    - { dir: 'tmux' }
    - { dir: 'tmux/plugins' }

- name: Software | tmux | git checkout git tmux plugins
  git:
    repo: https://github.com/tmux-plugins/{{ item.repo }}
    dest: /home/{{ user_name }}/.config/tmux/plugins/{{ item.plug }}
    force: yes
    version: master
  with_items:
    - { repo: 'tmux-cpu.git', plug: 'tmux-cpu' }
    - { repo: 'tmux-prefix-highlight.git', plug: 'tmux-prefix-highlight' }
    - { repo: 'tmux-yank.git', plug: 'tmux-yank' }
    - { repo: 'tmux-sidebar.git', plug: 'tmux-sidebar' }
    - { repo: 'tmux-open.git', plug: 'tmux-open' }

- name: Software | tmux | recursively chown all tmux plugins files
  file:
    path: /home/{{ user_name }}/.config/tmux/plugins
    state: directory
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
    mode: 0755
    recurse: yes

- name: Software | tmux | Download latest release gitmux info
  ansible.legacy.shell: |
    set -o pipefail
    curl --silent "https://api.github.com/repos/arl/gitmux/releases/latest" |
    jq -r .tag_name
  args:
    executable: /bin/bash
  register: gitmux_release
  changed_when: gitmux_release.rc == 0

- name: Software | tmux | print gitmux_release
  debug:
    var: gitmux_release.stdout
    verbosity: 2

- name: Software | tmux | install binary gitmux
  become: true
  become_method: sudo
  unarchive:
    src: https://github.com/arl/gitmux/releases/download/{{ gitmux_release.stdout }}/gitmux_{{ gitmux_release.stdout }}_linux_amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes
    mode: 0755
    owner: root
    group: root

- name: Software | tmux | create gitmux configuration file
  command: gitmux -printcfg
  register: gitmux_config
  changed_when: gitmux_config.rc == 0

- name: Software | tmux | write gitmux.conf file
  copy:
    content: "{{ gitmux_config.stdout }}"
    dest: /home/{{ user_name }}/.gitmux.conf
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
    mode: 0644
